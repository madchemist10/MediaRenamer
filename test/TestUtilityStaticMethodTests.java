import constants.Constants;
import errorHandle.ErrorHandler;
import junit.framework.TestCase;
import utilities.Utilities;

import java.util.HashMap;

/**
 * Set of tests to test the correctness of static methods
 * from the Utility Class.
 */
public class TestUtilityStaticMethodTests extends TestCase {

    /**Default test directory for testing*/
    private String testDir = HelperMethodsTest.TESTDIR;

    /**
     * Ensure the test directory is clean for next test.
     * @throws Exception if tear down fails.
     */
    public void tearDown() throws Exception{
        HelperMethodsTest.destroyTestDirectory(testDir);
        super.tearDown();
    }
    /**
     * Simple test to test that the filename is parsed
     * from the given path.
     */
    public void testParseFilenameFromPath(){
        String pathWithFilename = "C:\\User\\Test\\myFile.txt";
        String filename = Utilities.parseFilenameFromPath(pathWithFilename);
        assertEquals("myFile.txt",filename);
    }

    /**
     * Simple test to test that the filename is removed
     * from the given path.
     */
    public void testRemoveFilenameFromPath(){
        String pathWithFilename = "C:\\User\\Test\\myFile.txt";
        String path = Utilities.removeFilenameFromPath(pathWithFilename);
        assertEquals("C:\\User\\Test\\",path);
    }

    /**
     * Test the loading of a settings file into a map.
     * Ensure the correct keys are given for the settings
     * file that is generated by the helper test code.
     */
    public void testSettingsLoading(){
        String settingsPath = testDir+"\\settings.txt";
        HelperMethodsTest.generateTestSettingsFiles(testDir);
        assertTrue(Utilities.fileExists(settingsPath));
        HashMap<String,String> settings = Utilities.loadSettingsFile(settingsPath);
        assertTrue(5 <= settings.size());
        assertTrue(settings.containsKey(Constants.DEFAULT_RENAME_DIRECTORY));
        assertTrue(settings.containsKey(Constants.DEFAULT_COPY_DIRECTORY));
        assertTrue(settings.containsKey(Constants.USER_INTERACTION));
        assertTrue(settings.containsKey(Constants.COPY_FILES_FLAG));
        assertTrue(settings.containsKey(Constants.MEDIA_DIVISION));
    }

    /**
     * Test simple copy method for a file that
     * contains data.
     */
    public void testSimpleCopyFileWithData(){
        String srcFile = testDir+"\\sample.txt";
        ErrorHandler.printOutToFile(srcFile,"Test");
        String destFile = testDir+"\\sampleCopy.txt";
        Utilities.copyFile(srcFile,destFile);
        assertTrue(Utilities.fileExists(destFile));
    }

    /**
     * Test copy method for a file that
     * contains data with progress.
     */
    public void testCopyFileWithProgressWithData(){
        String srcFile = testDir+"\\sample.txt";
        ErrorHandler.printOutToFile(srcFile,"Test");
        String destFile = testDir+"\\sampleCopy.txt";
        Utilities.copyWithProgress(srcFile,destFile);
        assertTrue(Utilities.fileExists(destFile));
    }
}
